#!/bin/bash
#
# Setup Script: Claude Code Agent System for New Projects
# Version: 2.2.0-alpha
# Usage: ./setup_new_project.sh [project_directory]
#

set -e

PROJECT_DIR="${1:-.}"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
AGENT_SYSTEM_DIR="$(dirname "$SCRIPT_DIR")"

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "🤖 Claude Code Agent System Setup v2.2.0-alpha"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "Setting up agent system for: $PROJECT_DIR"
echo ""

# Navigate to project directory
cd "$PROJECT_DIR"

# 1. Create project .claude directory if needed
echo "📁 Creating .claude directories..."
mkdir -p .claude/commands
mkdir -p .claude/artifacts

# 2. Copy slash commands (optional - commands are personal by default)
echo "🔧 Slash commands are available globally from ~/.claude/commands/"
echo "   Commands available:"
echo "   - /feedback - Analyze orchestration performance"
echo "   - /research [topic] - Trigger research agent"
echo "   - /scout-explore [dir] - Explore codebase"
echo "   - /workflow-status - Check active workflows"
echo "   - /compact-status - Check context usage"

# 3. Initialize SQLite database schema (if not exists)
echo ""
echo "🗄️  Checking coordination database..."
DB_PATH="$HOME/.claude/memory.db"

if [ ! -f "$DB_PATH" ]; then
    echo "   Creating database schema..."
    sqlite3 "$DB_PATH" < "$AGENT_SYSTEM_DIR/schema.sql" || {
        echo "   ⚠️  Warning: Could not initialize database"
        echo "   Database schema available at: $AGENT_SYSTEM_DIR/schema.sql"
    }
else
    echo "   ✅ Database already exists at $DB_PATH"
fi

# 4. Setup Serena configuration for this project
echo ""
echo "🔍 Setting up Serena LSP configuration..."
mkdir -p .serena

if [ ! -f ".serena/project.yml" ]; then
    cat > .serena/project.yml <<EOF
# Serena LSP Configuration
# Auto-generated by agent system setup

project_name: $(basename "$PWD")
language: auto-detect
enabled: true

# Serena will auto-detect languages and provide semantic code understanding
# for Scout and Builder agents

# Supported languages:
# Python, TypeScript, JavaScript, Go, Rust, C/C++, Java, PHP, Ruby, Swift, etc.

EOF
    echo "   ✅ Created .serena/project.yml"
else
    echo "   ✅ Serena config already exists"
fi

# 5. Create project README with usage instructions
echo ""
echo "📝 Creating agent system README..."

if [ ! -f "AGENT_SYSTEM_USAGE.md" ]; then
    cat > AGENT_SYSTEM_USAGE.md <<'EOF'
# Agent System Usage for This Project

## Quick Start

### 1. Explore the Codebase
```
/scout-explore
```
Scout will analyze the project structure, tech stack, and architecture using Serena LSP.

### 2. Research Unknown Technologies
```
/research [technology name]
```
Research Agent will investigate unfamiliar frameworks or APIs.

### 3. Check Workflow Status
```
/workflow-status
```
See active workflows and recent agent activity.

### 4. Analyze Performance
```
/feedback
```
Get data-driven feedback on agent orchestration quality.

## Full Workflow Example

```
1. "Explore this codebase and suggest improvements"
   → Scout analyzes architecture
   → Planner creates improvement plan
   → User approves
   → Builder implements changes

2. "Research React Server Components and build a demo"
   → Research investigates RSC patterns
   → Scout explores existing code
   → Planner creates implementation plan
   → Builder builds the demo

3. "Fix the authentication bug"
   → Scout locates auth code
   → Builder creates fix with tests
```

## Available Agents

1. **Scout** - Codebase exploration (Serena LSP-powered)
2. **Research** - Technical investigation (Perplexity + WebSearch)
3. **Planner** - Strategic planning (Opus for complex reasoning)
4. **Builder** - Implementation (Serena LSP-powered, TDD workflow)
5. **Context Manager** - Smart context management
6. **Orchestrator** - Workflow coordination

## Slash Commands

- `/scout-explore [dir]` - Explore codebase
- `/research <topic>` - Deep technical research
- `/workflow-status` - Check active workflows
- `/feedback` - Performance analysis
- `/compact-status` - Context usage stats

## Tips

- Let Scout explore before building unfamiliar features
- Research new technologies before implementation
- Check `/feedback` regularly to improve agent performance
- Scout confidence < 0.7 triggers automatic research
- Use `/compact-status` when context usage is high

## Configuration

- Agent configs: `~/.claude/agents/`
- Database: `~/.claude/memory.db`
- Artifacts: `~/.claude/artifacts/`
- Serena config: `.serena/project.yml`

## Documentation

Full docs: https://github.com/jonzo97/cc_agents
EOF
    echo "   ✅ Created AGENT_SYSTEM_USAGE.md"
else
    echo "   ℹ️  AGENT_SYSTEM_USAGE.md already exists (not overwriting)"
fi

# 6. Verify agent configurations exist
echo ""
echo "🧠 Verifying agent configurations..."
AGENTS=("scout" "research" "planner" "builder" "context_manager" "orchestrator")
MISSING_AGENTS=()

for agent in "${AGENTS[@]}"; do
    if [ -f "$HOME/.claude/agents/$agent.md" ]; then
        echo "   ✅ $agent.md"
    else
        echo "   ❌ $agent.md (missing)"
        MISSING_AGENTS+=("$agent")
    fi
done

if [ ${#MISSING_AGENTS[@]} -gt 0 ]; then
    echo ""
    echo "   ⚠️  Missing agent configs:"
    echo "   Please copy agent files from: $AGENT_SYSTEM_DIR/../.claude/agents/"
    echo "   To: $HOME/.claude/agents/"
fi

# 7. Verify MCP servers
echo ""
echo "🔌 Checking MCP servers..."
echo "   Run: claude mcp list"
echo ""
echo "   Expected:"
echo "   ✅ serena - Semantic code understanding"
echo "   ✅ perplexity (optional) - Enhanced research"

# 8. Summary
echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo "✅ Setup Complete!"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "📋 Next Steps:"
echo ""
echo "1. Verify MCP servers:"
echo "   claude mcp list"
echo ""
echo "2. Test Scout exploration:"
echo "   /scout-explore"
echo ""
echo "3. Try Research Agent:"
echo "   /research [technology you're using]"
echo ""
echo "4. Check workflow status:"
echo "   /workflow-status"
echo ""
echo "5. Get performance feedback:"
echo "   /feedback"
echo ""
echo "📖 Full usage guide: ./AGENT_SYSTEM_USAGE.md"
echo "🌐 Documentation: https://github.com/jonzo97/cc_agents"
echo ""
echo "Happy coding with your agent team! 🚀"
echo ""
